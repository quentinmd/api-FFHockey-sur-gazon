#!/usr/bin/env python3
"""
Checklist de v√©rification pour les notifications email
Ex√©cutez ce script pour v√©rifier que tout est bien configur√©
"""

import os
import json
from pathlib import Path

class Color:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    RESET = '\033[0m'

def check(condition, success_msg, error_msg):
    """Afficher un check mark ou un X"""
    if condition:
        print(f"{Color.GREEN}‚úÖ {success_msg}{Color.RESET}")
        return True
    else:
        print(f"{Color.RED}‚ùå {error_msg}{Color.RESET}")
        return False

def main():
    print(f"\n{Color.BLUE}{'='*60}")
    print("üèë CHECKLIST - Email Notifications Setup")
    print(f"{'='*60}{Color.RESET}\n")
    
    passed = 0
    total = 0
    
    # Check 1: Fichier .env
    print(f"{Color.BLUE}1. Configuration Gmail (.env){Color.RESET}")
    total += 1
    if check(os.path.exists(".env"), 
             ".env existe", 
             ".env MANQUANT - Cr√©ez-le avec GMAIL_EMAIL et GMAIL_PASSWORD"):
        passed += 1
        
        # V√©rifier les variables
        os.environ.get("GMAIL_EMAIL") and print(f"   {Color.GREEN}‚úì GMAIL_EMAIL d√©fini{Color.RESET}")
        os.environ.get("GMAIL_PASSWORD") and print(f"   {Color.GREEN}‚úì GMAIL_PASSWORD d√©fini{Color.RESET}")
    print()
    
    # Check 2: Fichiers Python
    print(f"{Color.BLUE}2. Fichiers Backend{Color.RESET}")
    total += 1
    if check(os.path.exists("main.py"), 
             "main.py existe",
             "main.py MANQUANT"):
        passed += 1
        
        # V√©rifier que les imports sont dans main.py
        with open("main.py", "r") as f:
            content = f.read()
            has_dotenv = "load_dotenv" in content
            has_subscribe = "/api/v1/subscribe" in content
            has_email_func = "send_match_finished_email" in content
            
            print(f"   {Color.GREEN if has_dotenv else Color.RED}{'‚úì' if has_dotenv else '‚úó'} load_dotenv{Color.RESET}")
            print(f"   {Color.GREEN if has_subscribe else Color.RED}{'‚úì' if has_subscribe else '‚úó'} Endpoint /subscribe{Color.RESET}")
            print(f"   {Color.GREEN if has_email_func else Color.RED}{'‚úì' if has_email_func else '‚úó'} Fonction email{Color.RESET}")
    print()
    
    # Check 3: Fichiers React
    print(f"{Color.BLUE}3. Composants Frontend{Color.RESET}")
    total += 1
    has_all_files = True
    
    files_to_check = [
        ("Dashboard/src/components/Newsletter.jsx", "Newsletter component"),
        ("Dashboard/src/styles/Newsletter.css", "Newsletter CSS"),
        ("Dashboard/src/App.jsx", "App.jsx"),
    ]
    
    for file_path, desc in files_to_check:
        if os.path.exists(file_path):
            print(f"   {Color.GREEN}‚úì {desc}{Color.RESET}")
        else:
            print(f"   {Color.RED}‚úó {desc} MANQUANT{Color.RESET}")
            has_all_files = False
    
    if has_all_files:
        passed += 1
    print()
    
    # Check 4: Documentation
    print(f"{Color.BLUE}4. Documentation{Color.RESET}")
    total += 1
    doc_files = {
        "SETUP_EMAIL_RAPIDE.md": "Guide rapide (5 min)",
        "EMAIL_NOTIFICATIONS.md": "Documentation compl√®te",
        "IMPLEMENTATION_SUMMARY.md": "R√©sum√© technique",
        "EMAIL_SETUP_README.md": "README principal",
        "test_email_setup.py": "Script de test",
    }
    
    has_docs = True
    for doc, desc in doc_files.items():
        if os.path.exists(doc):
            print(f"   {Color.GREEN}‚úì {desc}{Color.RESET}")
        else:
            print(f"   {Color.YELLOW}‚ö† {desc} ({doc}){Color.RESET}")
            has_docs = False
    
    if has_docs:
        passed += 1
    print()
    
    # Check 5: D√©pendances
    print(f"{Color.BLUE}5. D√©pendances{Color.RESET}")
    total += 1
    dependencies = [
        ("fastapi", "FastAPI"),
        ("uvicorn", "Uvicorn"),
        ("requests", "Requests"),
        ("dotenv", "python-dotenv"),
        ("smtplib", "SMTP (stdlib)"),
    ]
    
    all_deps = True
    for module, name in dependencies:
        try:
            __import__(module)
            print(f"   {Color.GREEN}‚úì {name}{Color.RESET}")
        except ImportError:
            print(f"   {Color.RED}‚úó {name} MANQUANT{Color.RESET}")
            all_deps = False
    
    if all_deps:
        passed += 1
    print()
    
    # Check 6: .gitignore
    print(f"{Color.BLUE}6. S√©curit√© (.gitignore){Color.RESET}")
    total += 1
    if os.path.exists(".gitignore"):
        with open(".gitignore", "r") as f:
            gitignore_content = f.read()
            has_env = ".env" in gitignore_content
            has_json = "email_subscribers.json" in gitignore_content
            
            print(f"   {Color.GREEN if has_env else Color.YELLOW}{'‚úì' if has_env else '‚ö†'} .env dans .gitignore{Color.RESET}")
            print(f"   {Color.GREEN if has_json else Color.YELLOW}{'‚úì' if has_json else '‚ö†'} email_*.json dans .gitignore{Color.RESET}")
            
            if has_env and has_json:
                passed += 1
    print()
    
    # R√©sum√©
    percentage = (passed / total) * 100
    status = Color.GREEN if percentage == 100 else Color.YELLOW if percentage >= 80 else Color.RED
    
    print(f"{Color.BLUE}{'='*60}")
    print(f"{status}R√©sum√©: {passed}/{total} checks r√©ussis ({percentage:.0f}%){Color.RESET}")
    print(f"{'='*60}{Color.RESET}\n")
    
    if percentage == 100:
        print(f"{Color.GREEN}‚ú® Tout est pr√™t ! Vous pouvez d√©marrer l'API ‚ú®{Color.RESET}\n")
        print("Prochaines √©tapes:")
        print("1. D√©marrer l'API: python3 main.py")
        print("2. D√©marrer le dashboard: cd Dashboard && npm run dev")
        print("3. Aller sur http://localhost:5173")
        print("4. S'abonner via le formulaire email")
        print()
    elif percentage >= 80:
        print(f"{Color.YELLOW}‚ö†Ô∏è  Il manque quelques √©l√©ments, voir les ‚ùå ci-dessus{Color.RESET}\n")
    else:
        print(f"{Color.RED}‚ùå Des √©l√©ments critiques manquent, veuillez suivre les instructions{Color.RESET}\n")
    
    # Liens vers la documentation
    print(f"{Color.BLUE}üìö Documentation:{Color.RESET}")
    print("   1. D√©marrage rapide: SETUP_EMAIL_RAPIDE.md")
    print("   2. Documentation compl√®te: EMAIL_NOTIFICATIONS.md")
    print("   3. Vue d'ensemble: EMAIL_SETUP_README.md")
    print()

if __name__ == "__main__":
    # Charger les variables d'environnement
    from dotenv import load_dotenv
    load_dotenv()
    
    main()
